@implements IDisposable

@inject IBotController botController
@inject IWowScreen wowScreen

@inject MinimapNodeFinder minimapNodeFinder

@using System.Drawing
@using System.Drawing.Drawing2D;

<div class="card">
    <div class="card-header">
        <table width="100%">
            <tr>
                <td>
                    Minimap
                    <span style="float: right">
                        <button class="btn btn-sm @(previewEnabled ? "btn-danger" : "btn-primary")" @onclick="TogglePreview">Preview</button>
                        <ToggleButton />
                    </span>
                </td>
            </tr>
        </table>
    </div>
    <div class="card-body" style="padding: 0 0 0 0; width:@(Size)px; height:@(Size)px">
        @if (inited && previewEnabled)
        {
            <img style="width:@(Size)px; height:@(Size)px" src="data:image/png;base64, @WoWScreenUtil.ToBase64(wowScreen.MiniMapBitmap, bitmap, graphics)" alt="Red dot" />
        }
    </div>
</div>

@code {
    [Parameter]
    public int Size { get; set; } = 400;

    [Parameter]
    public float DownScale { get; set; } = 0.5f;

    [Parameter]
    public EventCallback<int> OnNodeFound { get; set; }

    private bool lastNodeFound = false;
    private int lastNodeCount = 0;

    private bool inited = false;
    private bool preview = false;
    private bool previewEnabled
    {
        get => preview;
        set
        {
            if (!inited)
            {
                inited = true;
                InitBitmap();
            }

            preview = value;
        }
    }

    private Graphics? graphics;
    private Bitmap? bitmap;

    protected override void OnInitialized()
    {
        if (OnNodeFound.HasDelegate)
        {
            minimapNodeFinder.NodeEvent += NodeFound;
        }
    }

    public void Dispose()
    {
        if (OnNodeFound.HasDelegate)
        {
            minimapNodeFinder.NodeEvent -= NodeFound;
        }

        graphics?.Dispose();
        bitmap?.Dispose();
    }

    private void InitBitmap()
    {
        int width;
        int height;

        int size = (int)(Size * DownScale);
        if (wowScreen.MiniMapBitmap.Width > wowScreen.MiniMapBitmap.Height)
        {
            width = size;
            height = Convert.ToInt32(wowScreen.MiniMapBitmap.Height * size / (float)wowScreen.MiniMapBitmap.Width);
        }
        else
        {
            width = Convert.ToInt32(wowScreen.MiniMapBitmap.Width * size / (float)wowScreen.MiniMapBitmap.Height);
            height = size;
        }

        bitmap = new Bitmap(width, height);

        graphics = Graphics.FromImage(bitmap);
        graphics.CompositingQuality = CompositingQuality.HighSpeed;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.CompositingMode = CompositingMode.SourceCopy;
    }

    private void NodeFound(object? source, MinimapNodeEventArgs e)
    {
        if (!botController.IsBotActive) return;

        bool nodeFound = e.X > 0 && e.Y > 0;
        if (lastNodeFound != nodeFound || e.Amount != lastNodeCount)
        {
            base.InvokeAsync(() =>
            {
                OnNodeFound.InvokeAsync(e.Amount);
            });
            lastNodeCount = e.Amount;
        }
        lastNodeFound = nodeFound;

        if (previewEnabled)
        {
            base.InvokeAsync(StateHasChanged);
        }
    }

    private void TogglePreview()
    {
        previewEnabled = !previewEnabled;
    }
}