@using MatBlazor
@using System.IO

@inject IBotController botController
@inject DataConfig dataConfig

@implements IDisposable

<style>
    .thumbnail {
        position: relative;
        z-index: 0;
        text-decoration: none;
    }

        .thumbnail:hover {
            background-color: transparent;
            z-index: 50;
        }

        .thumbnail .thumbnail-img {
            /*CSS for enlarged image*/
            position: absolute;
            padding: 5px;
            visibility: hidden;
            text-decoration: none;
        }

            .thumbnail .thumbnail-img img {
                padding: 2px;
            }

        .thumbnail:hover .thumbnail-img {
            /*CSS for enlarged image on hover*/
            visibility: visible;
            transform: scale(2);
            transform-origin: top left;
            position: fixed;
            top: 5px;
            left: 5px;
            pointer-events: none;
        }
</style>

<div class="card @(Hide ? "hide" : "")" style="margin-top: 10px">
    <div class="card-header d-flex justify-content-between align-items-center">
        <label>Path Profile</label>

        <MatAutocompleteList @ref="matAutocompleteList" Items="@Files" TItem="string" Label="Path" ValueChanged="OnSelectedPathChanged"
                             ShowClearButton="true" NumberOfElementsInPopup="@VisibleNum" OnTextChanged="OnTextChanged">
            <ItemTemplate>
                <div class="mat-autocomplete-list-popup-element" style="display: flex; width: 100%; font-size: 0.75vw">
                    @{
                        string imgFile = @context.Replace("json", "jpg");
                    }
                    @if (File.Exists(Path.Combine(dataConfig.Path, imgFile)))
                    {
                        <a class="thumbnail">
                            <span class="oi oi-image" aria-hidden="true"> </span>
                            <span class="thumbnail-img">
                                <img src="./path/@imgFile" />
                            </span>
                        </a>
                    }
                    @context
                </div>
            </ItemTemplate>
        </MatAutocompleteList>

        <button class="btn btn-sm btn-primary float-right" @onclick="OnClickButtonLoad" disabled="@(ButtonDisabled)">
            <span>Load Path</span>
        </button>
    </div>
</div>

@code {
    private MatAutocompleteList<string> matAutocompleteList = null!;

    [Parameter]
    public bool Hide { get; set; } = false;

    [Parameter]
    public PathSettings? Target { get; set; }

    [Parameter]
    public int TargetIndex { get; set; } = 0;

    private IEnumerable<string> Files { get; set; } = null!;

    private int VisibleNum { get; set; } = 10;
    private string Selected { get; set; } = string.Empty;
    private bool ButtonDisabled { get; set; } = true;

    private FileSystemWatcher watcher = null!;

    protected override void OnInitialized()
    {
        GetData();
        ValidateLoadButton();

        watcher = new(dataConfig.Path);

        watcher.NotifyFilter = NotifyFilters.Attributes
            | NotifyFilters.CreationTime
            | NotifyFilters.DirectoryName
            | NotifyFilters.FileName
            | NotifyFilters.LastAccess
            | NotifyFilters.LastWrite
            | NotifyFilters.Security
            | NotifyFilters.Size;

        watcher.Changed += OnChanged;
        watcher.Created += OnChanged;
        watcher.Deleted += OnChanged;
        watcher.Renamed += OnChanged;

        watcher.Filter = "*.json";
        watcher.IncludeSubdirectories = true;
        watcher.EnableRaisingEvents = true;

        botController.ProfileLoaded += ValidateLoadButton;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            matAutocompleteList.ItemSelected(Selected);
        }
    }

    public void Dispose()
    {
        watcher.Dispose();
        botController.ProfileLoaded -= ValidateLoadButton;
    }

    public void OnGet()
    {
        GetData();
    }

    private void OnSelectedPathChanged(string pick)
    {
        Selected = pick;
        if (string.IsNullOrEmpty(Selected) || Selected == Files.First())
        {
            Selected = string.Empty;
        }

        botController.SelectedPathFilename[TargetIndex] = Selected;

        ValidateLoadButton();
        base.InvokeAsync(StateHasChanged);
    }

    private void OnTextChanged(string text)
    {
        VisibleNum = string.IsNullOrEmpty(text) ? 10 : 50;
    }

    private void OnChanged(object? sender, FileSystemEventArgs e)
    {
        GetData();
        base.InvokeAsync(StateHasChanged);
    }


    private void OnClickButtonLoad()
    {
        botController.LoadPathProfile(botController.SelectedPathFilename);
    }

    private void ValidateLoadButton()
    {
        ButtonDisabled = string.IsNullOrEmpty(botController.SelectedClassFilename);
    }

    private void GetData()
    {
        Files = botController.PathFiles();

        if (botController.SelectedPathFilename.TryGetValue(TargetIndex, out string? selected))
        {
            Selected = selected ?? string.Empty;
        }
    }
}